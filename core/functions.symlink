#!/bin/sh

# Mac related Functions
# Formatting helpers
FORMAT_INFO='\e[36m >> \e[39m\e[1m'
FORMAT_DONE='\e[36m >> \e[1m'
FORMAT_INSTALL='\e[36m >> \e[92m\e[1m'
FORMAT_END='\e[0m'
FORMAT_WARNING='\e[36m >> \e[91m'

remove-dmg() {
    cd ~/Downloads/
    rm -rf *.dmg
    cd
}

clean-trash() {
    cd ~/.Trash
    rm -rf *
    cd
}

hide-desktop-icons() {
    defaults write com.apple.finder CreateDesktop false
    killall Finder
}

show-desktop-icons() {
    defaults write com.apple.finder CreateDesktop true
    killall Finder
}

# Tmux session functions
open-session() {
    tmx start $1
}

update-repo() {
    git fetch
    git rebase
}

stash-all() {
  git add .
  git stash
}

what-runs-on() {
    if [ "$1" = "--help" ]; then
        echo "Gets the running app info for port"
        return 0
    fi
    lsof -i tcp:$1
}

f() {
    if [ "$1" = "--help" ]; then
        echo "Open a file in the Directory with Neovim."
        return 0
    fi
    file=$(fd --type f --hidden --exclude .git | fzf-tmux -p --height 40% --reverse --info inline --border --preview 'cat {}')
    if [ ! -z $file  -a $file != " " ]; then
        nvim $file
    fi
}

# usage jupy TYPE ENVIRONMENT PORT
jupy(){

    total_args="$#"
    type="lab"
    environment="root"
    port="8888"
    if [ -z $1 ]; then
        printf "${FORMAT_WARNING}Environment name should not be empty.\n${FORMAT_END}"
        printf "${FORMAT_INFO}jupy ENVIRONMENT TYPE(default=lab) PORT(default=8888).\n${FORMAT_END}"
        return 0
    fi
    environment=$1
    if [ $total_args -eq "2" ]; then
        type=$2
    elif [ $total_args -eq "3" ]; then
        port=$3
    fi
    load_env $environment;
    jupyter $type --no-browser --port=$port | sleep 4 |
    open -a /Applications/Google\ Chrome.app "http://localhost:$port"
}


# Git based functions

get-commit-list() {

    if [ "$1" = "--help" ]; then
        echo "Gets the commit list for the current task. Ignores others' commits and merge commits"
        echo "There are 3 ways you can use this command"
        echo "\t Run without any parameters: Lists your commits for the current branch you are in."
        echo "\t Pass in gitlab username: Lists target developer's commits for the current branch you are in."
        echo "\t Pass in gitlab username and branch: Lists target developer's commits for the target branch."
        return 0
    fi
  userName=$(git config user.name)
  branchName=$(git branch --show-current)
  total_args="$#"
  if [ $total_args -eq "1" ]; then
    userName=$1
  elif [ $total_args -eq "2" ]; then
    userName=$1
    branchName=$2
  fi
  branchPrefix=$(echo $branchName | grep -Eo '^[A-Z0-9\-]+')
  git log --author=$userName --grep=$branchPrefix --oneline --no-merges
}

get-commit-id-list() {

    if [ "$1" = "--help" ]; then
        echo "Gets the commit id list for the current task. Ignores others' commits and merge commits"
        return 0
    fi
    commitList=`get-commit-list $1`

    commitIDList=$(echo "$commitList" | awk '{print $1}')
    echo $commitIDList
}

get-reversed-commit-id-list() {

    if [ "$1" = "--help" ]; then
        echo "Gets the reversed commit id list for the current task. Ignores others' commits and merge commits"
        return 0
    fi
    commitIDList=`get-commit-id-list $1`
    reversedIDList=$(echo $commitIDList | awk '{ lines[NR] = $0 } END { for (i = NR; i >= 1; i--) print lines[i] } ')
    echo $reversedIDList
}

force-ktlint() {
  fileList=$(git diff --name-only HEAD)
  for file in $fileList
  do
    ktlint -F $file
  done
}

# Push to Remote
ptr() {
    if [ "$1" = "--help" ]; then
        echo "Push the changes to the remote."
        return 0
    fi
    branch=$(git branch --show-current)
    git push -u origin $branch $@
}

# Get to Conflict
gtc() {
    if [ "$1" = "--help" ]; then
        echo "Get to the conflict with given branch or develop."
        return 0
    fi
  branchToPull="develop"
  if [[ ! -z "$1" ]]; then
    $branchToPull = $1
  fi
  git pull origin $branchToPull
}

cbl() {

    if [ "$1" = "--help" ]; then
        echo "Select branch from local list and check out."
        return 0
    fi
    branch=$(git branch | fzf)

    if [ -z $branch ]; then
        echo "Branch selection is empty, exiting..."
        return 0
    fi
    git checkout $branch
}

cbr() {

    if [ "$1" = "--help" ]; then
        echo "Select branch from remote list and check out."
        return 0
    fi
    branch=$(git branch -r | fzf)

    if [ -z $branch ]; then
        echo "Branch selection is empty, exiting..."
        return 0
    fi
    git checkout $branch
}

rebase() {
    var=$1
    git rebase -i @~$var
}

change() {
    git add .
    git commit --amend
}

step-forward() {
    git rebase --continue
}

ctlv() {
    change_to_local_version $@
}

# Navigation
#

cdtp() {
    if [[ "$1" == "--help" ]]; then
        echo "Usage: cdtp"
        echo "Navigate to your project folder from defined PROJECT_PATHS."
        echo "Define PROJECT_PATHS as a colon-separated list of directories to scan."
        return 0
    fi

    # Ensure PROJECT_PATHS is defined
    if [[ -z "$PROJECT_PATHS" ]]; then
        echo "Error: PROJECT_PATHS is not defined. Please set it in your shell configuration."
        return 1
    fi

    # Gather all subdirectories from the paths in PROJECT_PATHS
    local folders
    folders=$(find $(echo "$PROJECT_PATHS" | tr ':' ' ') -mindepth 2 -maxdepth 2 -type d ! -name ".*" 2>/dev/null)

    # Ensure there are folders to search
    if [[ -z "$folders" ]]; then
        echo "No project folders found in the defined PROJECT_PATHS."
        return 1
    fi

    # Create a list of basenames
    local basenames=()
    while IFS= read -r folder; do
        basenames+=("$(basename "$folder")")
    done <<< "$folders"

    # Use fzf to select a basename
    local selected
    selected=$(printf "%s\n" "${basenames[@]}" | fzf --prompt="Select a project: " --height=40%)

    # Handle no selection
    if [[ -z "$selected" ]]; then
        echo "No project selected."
        return 1
    fi

    # Find the selected project's full path
    local selectedPath
    selectedPath=$(echo "$folders" | grep "/$selected\$")

    if [[ -z "$selectedPath" ]]; then
        echo "Error: Could not find the selected project '$selected'."
        return 1
    fi

    # Navigate to the selected folder
    cd "$selectedPath" || {
        echo "Error: Could not navigate to '$selectedPath'."
        return 1
    }

    # Print the current directory
    echo "Navigated to $(pwd)"
}

# Project
op() {
    if [ "$1" = "--help" ]; then
        echo "open project with designated IDE."
        return 0
    fi
  if [[ -f "settings.gradle" || -f "settings.gradle.kts" ]] ; then
      choices="Stable\nBeta\nCanary"
      choice=$(echo $choices | fzf)
      case "$choice" in
      "Stable")
          echo "Opening Android Project with Android Stable"
          studio-stable .
        ;;
      "Beta")
          echo "Opening Android Project with Android Beta"
          studio-beta .
          ;;
      "Canary")
          echo "Opening Android Project with Android Canary"
          studio-canary .
          ;;
      *)
          echo "Not a valid choice. Exiting..."
          ;;
      esac
  elif [[ -d "Trendyol_v2" ]] ; then
    cd "Trendyol_v2"
      choices="Stable\nBeta\nCanary"
      choice=$(echo -e $choices | fzf)
      case "$choice" in
      "Stable")
          echo "Opening Trendyol Android Project with Android Stable"
          studio-stable .
          cd ..
        ;;
      "Beta")
          echo "Opening Trendyol Android Project with Android Beta"
          studio-beta .
          cd ..
          ;;
      "Canary")
          echo "Opening Trendyol Android Project with Android Canary"
          studio-canary .
          cd ..
          ;;
      *)
          echo "Not a valid choice. Exiting..."
          cd ..
          ;;
      esac
  elif [[ -d "pl-app" ]] ; then
    cd "pl-app"
      choices="Stable\nBeta\nCanary"
      choice=$(echo -e $choices | fzf)
      case "$choice" in
      "Stable")
          echo "Opening Trendyol Android Project with Android Stable"
          studio-stable .
          cd ..
        ;;
      "Beta")
          echo "Opening Trendyol Android Project with Android Beta"
          studio-beta .
          cd ..
          ;;
      "Canary")
          echo "Opening Trendyol Android Project with Android Canary"
          studio-canary .
          cd ..
          ;;
      *)
          echo "Not a valid choice. Exiting..."
          cd ..
          ;;
      esac
  elif [[ -f "go.mod" ]]; then
      echo "Opening Go project with Goland"
      goland .
  else
      echo "Opening with Visual Studio Code"
      code .
  fi

}


tkill-all() {
    for i in `tmux ls -F "#{session_name}"`; do tmux kill-session -t $i ; done;
}

alacritty_theme(){
    if [ -z "~/.config/alacritty/color.yml" ]; then
        echo "file ~/.config/alacritty/color.yml doesn't exist"
        return 0
    fi
    CONFIG_PATH="$HOME/.config/alacritty/color.yml"
    sed -i "" -e "s#^colors: \*.*#colors: *$1#g" $CONFIG_PATH ;
}

lgt(){
    if [ -z "~/Library/Application Support/lazygit/config.yml" ]; then
        echo "file doesn't exist."
        return 0
    fi
    CONFIG_PATH="$HOME/Library/Application Support/lazygit/config.yml"
    if [[ "$1" == "light" ]]; then
        cp -f "$HOME/.config/lazygit/config-light.yml" $CONFIG_PATH
    else
        cp -f "$HOME/.config/lazygit/config-dark.yml" $CONFIG_PATH
    fi
}

cb () {
   if [[ "$1" == "dark" ]]; then
       `fish -c 'cb dark'`
   else
       `fish -c 'cb light'`
   fi
}

change_background(){
    local MODE="light"
    if [ -z "$1" ]; then
        local DEFAULT=`defaults read -g AppleInterfaceStyle 2>/dev/null`
        if [[ "$DEFAULT" == "Dark" ]]; then
            MODE="dark"
        fi
    else
        if [[ "$1" == "light" ]]; then
            osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = false" 2>/dev/null;
            MODE="light"
        else
            osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = true" 2>/dev/null;
            MODE="dark"
        fi
    fi
    # Change neovim    
    nvr --serverlist | while read addr; do
        
        if [[ "$MODE" == "light" ]]; then
            /opt/homebrew/bin/nvr --servername "$addr" -c "set background=light"
        else
            /opt/homebrew/bin/nvr --servername "$addr" -c "set background=dark"
        fi
    done
    # Change Alacritty
    if [[ "$MODE" == "light" ]]; then
        `alacritty_theme light`
    else
        `alacritty_theme dark`
    fi
    # Change Lazygit
    if [[ "$MODE" == "light" ]]; then
        `lgt light`
    else
        `lgt dark`
    fi
    #Change Kitty
    if [[ "$MODE" == "light" ]]; then
        `ln -sf "$HOME/personal/dotfiles/configs/kitty/light-theme.conf" "$HOME/.config/kitty/current-theme.conf"`
    else
        `ln -sf "$HOME/personal/dotfiles/configs/kitty/dark-theme.conf" "$HOME/.config/kitty/current-theme.conf"`
    fi
}

jj () {
    cd "${1:-.}/$(find . -maxdepth 5 -type d -name .git | sed 's|/.git$||' | fzf --preview 'tree -L 2 ./{}')"
}
