#!/bin/sh

# Mac related Functions
# Formatting helpers
FORMAT_INFO='\e[36m >> \e[39m\e[1m'
FORMAT_DONE='\e[36m >> \e[1m'
FORMAT_INSTALL='\e[36m >> \e[92m\e[1m'
FORMAT_END='\e[0m'
FORMAT_WARNING='\e[36m >> \e[91m'

remove_dmg() {
    cd ~/Downloads/
    rm -rf *.dmg
    cd
}

clean_trash() {
    cd ~/.Trash
    rm -rf *
    cd
}

# Tmux session functions
open_session() {
    tmx start $1
}

update_repo() {
    git fetch
    git rebase
}

what_runs_on() {
    lsof -i tcp:$1
}


run_processing() {
    rm -rf /tmp/processing
    mkdir /tmp/processing
    /usr/local/bin/processing-java --output=/tmp/processing/ --force --sketch=`pwd` --run
}

# usage jupy TYPE ENVIRONMENT PORT
jupy(){

    total_args="$#"
    type="lab"
    environment="root"
    port="8888"
    if [ -z $1 ]; then
        printf "${FORMAT_WARNING}Environment name should not be empty.\n${FORMAT_END}"
        printf "${FORMAT_INFO}jupy ENVIRONMENT TYPE(default=lab) PORT(default=8888).\n${FORMAT_END}"
        return 0
    fi
    environment=$1
    if [ $total_args -eq "2" ]; then
        type=$2
    elif [ $total_args -eq "3" ]; then
        port=$3
    fi
    load_env $environment;
    jupyter $type --no-browser --port=$port | sleep 4 |
    open -a /Applications/Google\ Chrome.app "http://localhost:$port"
}


# Git based functions

get_commit_list_for() {
  userName=$(git config user.name)
  branchName=$(git branch --show-current)
  total_args="$#"
  if [ $total_args -eq "1" ]; then
    userName=$1
  elif [ $total_args -eq "2" ]; then
    userName=$1
    branchName=$2
  fi
  branchPrefix=$(echo $branchName | grep -Eo '^[A-Z0-9\-]+')
  git log --author=$userName --grep=$branchPrefix --oneline --no-merges
}

force_ktlint() {
  fileList=$(git diff --name-only HEAD)
  for file in $fileList
  do
    ktlint -F $file
  done
}

send_to_review() {
    branch=$(git branch --show-current)
    git push origin HEAD:refs/for/$branch
}

push_to_remote() {
    branch=$(git branch --show-current)
    git push -u origin $branch
}

get_to_conflict() {
  git pull origin develop
}

rebase() {
    var=$1
    git rebase -i @~$var
}

change() {
    git add .
    git commit --amend
}

step_forward() {
    git rebase --continue
}

ctlv() {
    change_to_local_version $@
}


alacritty_theme(){
    if [ -z "~/.config/alacritty/color.yml" ]; then
        echo "file ~/.config/alacritty/color.yml doesn't exist"
        return 0
    fi
    CONFIG_PATH="$HOME/.config/alacritty/color.yml"
    sed -i "" -e "s#^colors: \*.*#colors: *$1#g" $CONFIG_PATH ;
}

lgt(){
    if [ -z "~/Library/Application Support/lazygit/config.yml" ]; then
        echo "file doesn't exist."
        return 0
    fi
    CONFIG_PATH="$HOME/Library/Application Support/lazygit/config.yml"
    if [[ "$1" == "light" ]]; then
        cp -f "$HOME/.config/lazygit/config-light.yml" $CONFIG_PATH
    else
        cp -f "$HOME/.config/lazygit/config-dark.yml" $CONFIG_PATH
    fi
}

cb () {
   if [[ "$1" == "dark" ]]; then
       `fish -c 'cb dark'`
   else
       `fish -c 'cb light'`
   fi

}

change_background(){
    local MODE="light"
    if [ -z "$1" ]; then
        local DEFAULT=`defaults read -g AppleInterfaceStyle 2>&1`
        if [[ "$DEFAULT" == "Dark" ]]; then
            MODE="dark"
        fi
    else
        if [[ "$1" == "light" ]]; then
            osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = false" 2>/dev/null;
            MODE="light"
        else
            osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = true" 2>/dev/null;
            MODE="dark"
        fi
    fi

    local TMUX_WINS=`/opt/homebrew/bin/tmux list-windows -t main`
    local W_LIST=($(/opt/homebrew/bin/tmux list-windows -t main -F 'main:#{window_index}'))
    for WIX in ${W_LIST}
      do
         local P_LIST=($(/opt/homebrew/bin/tmux list-panes -F 'main:#{window_index}.#{pane_index}' -t $WIX))
         for PIX in ${P_LIST}
             do
                 local IS_VIM=`ps -o state= -o comm= -t '#{pane_tty}'  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?\$'`
                 /opt/homebrew/bin/tmux if-shell -t "$PIX" "$IS_VIM" "send-keys -t $PIX escape ENTER"
                 /opt/homebrew/bin/tmux if-shell -t "$PIX" "$IS_VIM" "send-keys -t $PIX ':call ChangeBackground()' ENTER"
             done
     done

    #if [[ "$MODE" == "dark" ]]; then
    #    tmux source-file ~/.tmux/tmux-dark.conf
    #else
    #    tmux source-file ~/.tmux/tmux-light.conf
    #fi
    if [[ "$MODE" == "light" ]]; then
        `alacritty_theme gruvbox_light`
    else
        `alacritty_theme gruvbox_dark`
    fi

    if [[ "$MODE" == "light" ]]; then
        `lazygit_theme light`
    else
        `lazygit_theme dark`
    fi
}

pnvim() {
    mkdir -p  "$HOME/.config/nvim-profiles"
    mkdir -p "$HOME/.config/nvim-profiles/yigitozgumus"
    ln -sf "$HOME/personal/dotfiles/configs/nvim" "$HOME/.config/nvim-profiles/yigitozgumu/nvim"
    NVIM_PROFILE_NAME="yigitozgumus"
    NVIM_INIT_FILE="init.lua"
    NVIM_COMMAND="nvim"

exec env XDG_CONFIG_HOME="$HOME/.config/nvim-profiles/${NVIM_PROFILE_NAME}" \
         XDG_DATA_HOME="$HOME/.local/share/nvim-profiles/${NVIM_PROFILE_NAME}" \
         XDG_CACHE_HOME="$HOME/.cache/nvim-profiles/${NVIM_PROFILE_NAME}" \
         ${NVIM_COMMAND} -u "$HOME/.config/nvim-profiles/${NVIM_PROFILE_NAME}/nvim/${NVIM_INIT_FILE}"\
         "$@"
}
