#!/bin/sh

# Mac related Functions
# Formatting helpers
FORMAT_INFO='\e[36m >> \e[39m\e[1m'
FORMAT_DONE='\e[36m >> \e[1m'
FORMAT_INSTALL='\e[36m >> \e[92m\e[1m'
FORMAT_END='\e[0m'
FORMAT_WARNING='\e[36m >> \e[91m'

remove-dmg() {
    cd ~/Downloads/
    rm -rf *.dmg
    cd
}

clean-trash() {
    cd ~/.Trash
    rm -rf *
    cd
}

hide-desktop-icons() {
    defaults write com.apple.finder CreateDesktop false
    killall Finder
}

show-desktop-icons() {
    defaults write com.apple.finder CreateDesktop true
    killall Finder
}

# Tmux session functions
open-session() {
    tmx start $1
}

update-repo() {
    git fetch
    git rebase
}

stash-all() {
  git add .
  git stash
}

what-runs-on() {
    lsof -i tcp:$1
}

f() {
    file=$(fd --type f --hidden --exclude .git | fzf-tmux -p --height 40% --reverse --info inline --border --preview 'cat {}')
    if [ ! -z $file  -a $file != " " ]; then
        nvim $file
    fi
}

# usage jupy TYPE ENVIRONMENT PORT
jupy(){

    total_args="$#"
    type="lab"
    environment="root"
    port="8888"
    if [ -z $1 ]; then
        printf "${FORMAT_WARNING}Environment name should not be empty.\n${FORMAT_END}"
        printf "${FORMAT_INFO}jupy ENVIRONMENT TYPE(default=lab) PORT(default=8888).\n${FORMAT_END}"
        return 0
    fi
    environment=$1
    if [ $total_args -eq "2" ]; then
        type=$2
    elif [ $total_args -eq "3" ]; then
        port=$3
    fi
    load_env $environment;
    jupyter $type --no-browser --port=$port | sleep 4 |
    open -a /Applications/Google\ Chrome.app "http://localhost:$port"
}


# Git based functions

get-commit-list() {
  userName=$(git config user.name)
  branchName=$(git branch --show-current)
  total_args="$#"
  if [ $total_args -eq "1" ]; then
    userName=$1
  elif [ $total_args -eq "2" ]; then
    userName=$1
    branchName=$2
  fi
  branchPrefix=$(echo $branchName | grep -Eo '^[A-Z0-9\-]+')
  git log --author=$userName --grep=$branchPrefix --oneline --no-merges
}

get-commit-id-list() {
    commitList=`get-commit-list`

    commitIDList=$(echo "$commitList" | awk '{print $1}')
    echo $commitIDList
}

get-reversed-commit-id-list() {
    commitIDList=`get-commit-id-list`
    reversedIDList=$(echo $commitIDList | awk '{ lines[NR] = $0 } END { for (i = NR; i >= 1; i--) print lines[i] } ')
    echo $reversedIDList
}

force-ktlint() {
  fileList=$(git diff --name-only HEAD)
  for file in $fileList
  do
    ktlint -F $file
  done
}

push-to-remote() {
    branch=$(git branch --show-current)
    git push -u origin $branch
}

get-to-conflict() {
  branchToPull="develop"
  if [[ ! -z "$1" ]]; then
    $branchToPull = $1
  fi
  git pull origin $branchToPull
}

rebase() {
    var=$1
    git rebase -i @~$var
}

change() {
    git add .
    git commit --amend
}

step-forward() {
    git rebase --continue
}

ctlv() {
    change_to_local_version $@
}

# Navigation
#
gtw() {
    folder=`ls ~/work | fzf-tmux -p --reverse`
    cd "$HOME/work/$folder"
}

gtwt() {
    folder=`ls ~/work/workspaces | fzf-tmux -p --reverse`
    cd "$HOME/work/workspaces/$folder"
}

gtp() {
    folder=`ls ~/personal | fzf-tmux -p --reverse`
    cd "$HOME/personal/$folder"
}

go-to-project() {
    folders=`find ~/projects -mindepth 2 -maxdepth 2 -type d ! -name ".*"`
    selected=`echo $folders | xargs basename | fzf`
    selectedPath=`echo $folders | grep $selected`
    cd "$selectedPath"
}

# Project
open-project() {
  if [[ -f "settings.gradle" || -f "settings.gradle.kts" ]] ; then

      choices="Stable\nBeta\nCanary"
      choice=$(echo $choices | fzf)
      case "$choice" in
      "Stable")
          echo "Opening Android Project with Android Stable"
          studio-stable .
        ;;
      "Beta")
          echo "Opening Android Project with Android Beta"
          studio-beta .
          ;;
      "Canary")
          echo "Opening Android Project with Android Canary"
          studio-canary .
          ;;
      *)
          echo "Not a valid choice. Exiting..."
          ;;
      esac
  elif [[ -d "Trendyol_v2" ]] ; then
    cd "Trendyol_v2"
      choices="Stable\nBeta\nCanary"
      choice=$(echo -e $choices | fzf)
      case "$choice" in
      "Stable")
          echo "Opening Trendyol Android Project with Android Stable"
          studio-stable .
          cd ..
        ;;
      "Beta")
          echo "Opening Trendyol Android Project with Android Beta"
          studio-beta .
          cd ..
          ;;
      "Canary")
          echo "Opening Trendyol Android Project with Android Canary"
          studio-canary .
          cd ..
          ;;
      *)
          echo "Not a valid choice. Exiting..."
          cd ..
          ;;
      esac
  elif [[ -f "go.mod" ]]; then
      echo "Opening Go project with Goland"
      goland .
  else
      echo "Opening with Visual Studio Code"
      code .
  fi

}


tkill-all() {
    for i in `tmux ls -F "#{session_name}"`; do tmux kill-session -t $i ; done;
}

alacritty_theme(){
    if [ -z "~/.config/alacritty/color.yml" ]; then
        echo "file ~/.config/alacritty/color.yml doesn't exist"
        return 0
    fi
    CONFIG_PATH="$HOME/.config/alacritty/color.yml"
    sed -i "" -e "s#^colors: \*.*#colors: *$1#g" $CONFIG_PATH ;
}

lgt(){
    if [ -z "~/Library/Application Support/lazygit/config.yml" ]; then
        echo "file doesn't exist."
        return 0
    fi
    CONFIG_PATH="$HOME/Library/Application Support/lazygit/config.yml"
    if [[ "$1" == "light" ]]; then
        cp -f "$HOME/.config/lazygit/config-light.yml" $CONFIG_PATH
    else
        cp -f "$HOME/.config/lazygit/config-dark.yml" $CONFIG_PATH
    fi
}

cb () {
   if [[ "$1" == "dark" ]]; then
       `fish -c 'cb dark'`
   else
       `fish -c 'cb light'`
   fi
}

change_background(){
    local MODE="light"
    if [ -z "$1" ]; then
        local DEFAULT=`defaults read -g AppleInterfaceStyle 2>/dev/null`
        if [[ "$DEFAULT" == "Dark" ]]; then
            MODE="dark"
        fi
    else
        if [[ "$1" == "light" ]]; then
            osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = false" 2>/dev/null;
            MODE="light"
        else
            osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = true" 2>/dev/null;
            MODE="dark"
        fi
    fi
    # Change neovim    
    nvr --serverlist | while read addr; do
        
        if [[ "$MODE" == "light" ]]; then
            /opt/homebrew/bin/nvr --servername "$addr" -c "set background=light"
        else
            /opt/homebrew/bin/nvr --servername "$addr" -c "set background=dark"
        fi
    done
    # Change Alacritty
    if [[ "$MODE" == "light" ]]; then
        `alacritty_theme light`
    else
        `alacritty_theme dark`
    fi
    # Change Lazygit
    if [[ "$MODE" == "light" ]]; then
        `lgt light`
    else
        `lgt dark`
    fi
    #Change Kitty
    if [[ "$MODE" == "light" ]]; then
        `ln -sf "$HOME/personal/dotfiles/configs/kitty/light-theme.conf" "$HOME/.config/kitty/current-theme.conf"`
    else
        `ln -sf "$HOME/personal/dotfiles/configs/kitty/dark-theme.conf" "$HOME/.config/kitty/current-theme.conf"`
    fi
}

pnvim() {
    mkdir -p  "$HOME/.config/nvim-profiles"
    mkdir -p "$HOME/.config/nvim-profiles/yigitozgumus"
    ln -sf "$HOME/personal/dotfiles/configs/nvim" "$HOME/.config/nvim-profiles/yigitozgumu/nvim"
    NVIM_PROFILE_NAME="yigitozgumus"
    NVIM_INIT_FILE="init.lua"
    NVIM_COMMAND="nvim"

exec env XDG_CONFIG_HOME="$HOME/.config/nvim-profiles/${NVIM_PROFILE_NAME}" \
         XDG_DATA_HOME="$HOME/.local/share/nvim-profiles/${NVIM_PROFILE_NAME}" \
         XDG_CACHE_HOME="$HOME/.cache/nvim-profiles/${NVIM_PROFILE_NAME}" \
         ${NVIM_COMMAND} -u "$HOME/.config/nvim-profiles/${NVIM_PROFILE_NAME}/nvim/${NVIM_INIT_FILE}"\
         "$@"
}
