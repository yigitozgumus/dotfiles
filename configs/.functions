#!/bin/sh
# python functions
load_env(){
    conda activate $1
}

deload(){
    conda deactivate
}

# Mac related Functions

remove_dmg(){
    cd ~/Downloads/ ; rm -rf *.dmg ; cd
}

clean_trash(){
    cd ~/.Trash ; rm -rf * ; cd
}

# Tmux session functions
open_website(){
    tmx start website
}

open_thesis(){
    tmx start thesis
}

open_interview(){
    tmx start interview
}

jlab(){
    env=$VIRTUAL_ENV
    if [ -z "$env" ] 
    then
        workon ml
    fi
    var="$1"
    if [ -z "$var" ]
    then
        jupyter lab --no-browser --port=8888 | sleep 4 |
        open -a /Applications/Safari\ Technology\ Preview.app "http://localhost:8888"
    else
        jupyter lab --no-browser --port="$var" | sleep 4 |
        open -a /Applications/Safari\ Technology\ Preview.app "http://localhost:$var"
   
    fi
}

jnote(){
    var="$1"
    if [ -z "$var" ]
    then
        jupyter notebook --no-browser --port=8888 | sleep 4 |
        open -a /Applications/Safari\ Technology\ Preview.app "http://localhost:8888"
    else
        jupyter notebook --no-browser --port="$var" | sleep 4 |
        open -a /Applications/Safari\ Technology\ Preview.app "http://localhost:$var"
   
    fi
}

colab_online(){
    open -a /Applications/Google\ Chrome.app "https://colab.research.google.com"
}

# Git based functions

PROJECT_NAME="ssh://ozgumusy@gerrit.pozitron.com:29418/Pegasus-Redesign-Android"

send_to_review(){
    branch=`git branch --show-current`
    git push origin HEAD:refs/for/$branch
}

rebase(){
    var=$1
    git rebase -i @~$var
}

change(){
    git add .
    git commit --amend
}

step_forward(){
    git rebase --continue
}

ctlv(){
    change_to_local_version $@
}

change_to_local_version(){
    branch=`git branch --show-current`
    local="_local"
    local_branch="$branch$local"
    echo "Switching to local copy\n"
    git checkout -b $local_branch
    if [ -z "$@"]; then
        echo "\nOperation completed.\n"
    else
        echo "\nCherry picking the given commits\n"
        for i in "$@"
        do 
            git fetch $PROJECT_NAME $i
            git cherry-pick FETCH_HEAD  # add web hook line to here
            echo "\n"
        done
        echo "\nOperation completed.\n"
    fi
    
}

bto(){
 back_to_original $@   
}

back_to_original(){
    # get the original branch name
    echo "Patching things to original branch...\n"
    local_branch=`git branch --show-current`
    length=$( expr ${#local_branch} - 6 )
    original_branch=`echo $local_branch | cut -c-$length`
    echo "Original branch is $original_branch\n"
    
    echo "Switched to original branch\n"
    author=`git config user.name`
    commits=`git log  $original_branch..$local_branch --pretty=format:'%H' --author $author`
    if [ ! -z $commits ]; then
        echo "Commits from the local branches are:\n"
        commits=(`echo $commits | tr '\n' ' '`)
        for (( idx=${#commits[@]} ; idx>=0 ; idx-- )) ; do
            echo "${commits[idx]}"
        done
    fi
    
    echo "Switching to original branch\n"
        
    git checkout $original_branch
    if [ ! -z $commits ]; then
        echo "\nCommits will be applied.\n"
    fi
   for (( idx=${#commits[@]} ; idx>=0 ; idx-- )) ; do
        commit="${commits[idx]}"
        cherry=`echo $commit | tr -d " "`;
       if [ -z $cherry ]; then
           echo "Commits are transferred.\n"
       else
           git cherry-pick $cherry
           echo "\n"
       fi
    done

    change=$1
    if [ $change = '-d' ]; then
        echo "Deleting Local branch\n"
        git branch -D $local_branch
    fi
}

