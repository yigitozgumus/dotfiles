#!/bin/sh

# Mac related Functions
# Formatting helpers
FORMAT_INFO='\e[36m >> \e[39m\e[1m'
FORMAT_DONE='\e[36m >> \e[1m'
FORMAT_INSTALL='\e[36m >> \e[92m\e[1m'
FORMAT_END='\e[0m'
FORMAT_WARNING='\e[36m >> \e[91m'

load_env(){
    conda activate $1
}

deload(){
    conda deactivate
}

remove_dmg() {
    cd ~/Downloads/
    rm -rf *.dmg
    cd
}

clean_trash() {
    cd ~/.Trash
    rm -rf *
    cd
}

# Tmux session functions
open_session() {
    tmx start $1
}

# usage jupy TYPE ENVIRONMENT PORT
jupy(){

    total_args="$#"
    type="lab"
    environment="root"
    port="8888"
    if [ -z $1 ]; then
        printf "${FORMAT_WARNING}Environment name should not be empty.\n${FORMAT_END}"
        printf "${FORMAT_INFO}jupy ENVIRONMENT TYPE(default=lab) PORT(default=8888).\n${FORMAT_END}"
        return 0
    fi
    environment=$1
    if [ $total_args -eq "2" ]; then
        type=$2
    elif [ $total_args -eq "3" ]; then
        port=$3
    fi
    load_env $environment;
    jupyter $type --no-browser --port=$port | sleep 4 |
    open -a /Applications/Google\ Chrome.app "http://localhost:$port"
}

colab_online() {
    open -a /Applications/Google\ Chrome.app "https://colab.research.google.com"
}

# Git based functions

send_to_review() {
    branch=$(git branch --show-current)
    git push origin HEAD:refs/for/$branch
}

rebase() {
    var=$1
    git rebase -i @~$var
}

change() {
    git add .
    git commit --amend
}

step_forward() {
    git rebase --continue
}

ctlv() {
    change_to_local_version $@
}

PROJECT_NAME="ssh://ozgumusy@gerrit.pozitron.com:29418/Pegasus-Redesign-Android"

change_to_local_version() {
    branch=$(git branch --show-current)
    local="_local"
    local_branch="$branch$local"
    printf "${FORMAT_INFO}Switching to local copy\n${FORMAT_END}"
    git checkout -b $local_branch
    if [ -z "$@"]; then
        printf "${FORMAT_INFO}Operation completed.\n${FORMAT_END}"
    else
        printf "${FORMAT_INFO}Cherry picking commits..\n${FORMAT_END}"
        for i in "$@"; do
            git fetch $PROJECT_NAME $i
            git cherry-pick FETCH_HEAD # add web hook line to here
            echo "\n"
        done
        printf "${FORMAT_INFO}Operation completed.\n${FORMAT_END}"
    fi

}

bto() {
    back_to_original $@
}

back_to_original() {
    # get the original branch name
    echo "Patching things to original branch...\n"
    local_branch=$(git branch --show-current)
    length=$(expr ${#local_branch} - 6)
    original_branch=$(echo $local_branch | cut -c-$length)
    echo "Original branch is $original_branch\n"

    echo "Switched to original branch\n"
    author=$(git config user.name)
    commits=$(git log $original_branch..$local_branch --pretty=format:'%H' --author $author)
    if [ ! -z $commits ]; then
        echo "Commits from the local branches are:\n"
        commits=($(echo $commits | tr '\n' ' '))
        for ((idx = ${#commits[@]}; idx >= 0; idx--)); do
            echo "${commits[idx]}"
        done
    fi

    echo "Switching to original branch\n"

    git checkout $original_branch
    if [ ! -z $commits ]; then
        echo "\nCommits will be applied.\n"
    fi
    for ((idx = ${#commits[@]}; idx >= 0; idx--)); do
        commit="${commits[idx]}"
        cherry=$(echo $commit | tr -d " ")
        if [ -z $cherry ]; then
            echo "Commits are transferred.\n"
        else
            git cherry-pick $cherry
            echo "\n"
        fi
    done
    if [ ! -z $1 ]; then
        change=$1
        if [ $change = '-d' ]; then
            echo "Deleting Local branch\n"
            git branch -D $local_branch
        fi
    fi
}

# This function gathers all the remote branches in the project, stores them and finds if any of
# are merged into one of the version branches. and creates an output table.

branch_management() {
    if [ -z $1 ]; then
        echo "Version branch folder should not be null."
    else
        echo "version branch folder is: $1."
        folder=$1
    fi
    if [ -z $2 ]; then
        echo "Current live version should not be null."
    else
        echo "Current live version is: $2."
        version=$2
    fi
    # Save current branch
    local_branch=$(git branch --show-current)
    # Create files
    version_branch_file="/tmp/version_branches"
    other_branch_file="/tmp/other_branches"
    commit_dump="/tmp/commit_dump"
    touch $version_branch_file
    touch $other_branch_file
    touch $commit_dump
    version_branches=$(git branch --list --remote | sed "/origin\//s///" | grep $folder | awk '{$1=$1};1')
    echo $version_branches >>$version_branch_file
    other_branches=$(git branch --list --remote | sed "/origin\//s///" | sed -n '1!p' | grep -v $folder | awk '{$1=$1};1')
    echo $other_branches >>$other_branch_file

    while IFS= read -r line; do
        git checkout $line
        # while IFS= read -r branch; do
        info=$(git --no-pager log --oneline --merges -n 10)
        if [ ! -z $info ]; then
            echo $line >>$commit_dump
            echo $info >>$commit_dump
        fi
        # done <"$other_branch_file"
        #git --no-pager log --oneline --merges -n 1 >>$commit_dump
    done <"$version_branch_file"

    # We are done
    rm -f $version_branch_file
    rm -f $other_branch_file
    #rm -f $commit_dump
    # Return to local branch
    git checkout $local_branch
}

get_sha256_from_key(){
    openssl x509 -in $1  -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64
}

alacritty_theme(){
    if [ -z "~/.config/alacritty/color.yml" ]; then
        echo "file ~/.config/alacritty/color.yml doesn't exist"
        return 0
    fi
    CONFIG_PATH="$HOME/.config/alacritty/color.yml"
    sed -i "" -e "s#^colors: \*.*#colors: *$1#g" $CONFIG_PATH ;
}


change_background(){
    local MODE="light"
    if [ -z "$1" ]; then
        local DEFAULT=`defaults read -g AppleInterfaceStyle 2>&1`
        if [[ "$DEFAULT" == "Dark" ]]; then
            MODE="dark"
        fi
    else
        if [[ "$1" == "light" ]]; then
            osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = false" 2>/dev/null;
            MODE="light"
        else
            osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = true" 2>/dev/null;
            MODE="dark"
        fi
    fi

    local TMUX_WINS=`/usr/local/bin/tmux list-windows -t main`
    local W_LIST=($(/usr/local/bin/tmux list-windows -t main -F 'main:#{window_index}'))
    # for WIX in ${W_LIST}
    # do
    #     local P_LIST=($(/usr/local/bin/tmux list-panes -F 'main:#{window_index}.#{pane_index}' -t $WIX))
    #     for PIX in ${P_LIST}
    #         do
    #             local IS_VIM=`ps -o state= -o comm= -t '#{pane_tty}'  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?\$'`
    #             /usr/local/bin/tmux if-shell -t "$PIX" "$IS_VIM" "send-keys -t $PIX escape ENTER"
    #             /usr/local/bin/tmux if-shell -t "$PIX" "$IS_VIM" "send-keys -t $PIX ':call ChangeBackground()' ENTER"
    #         done
    # done

    #if [[ "$MODE" == "dark" ]]; then
    #    tmux source-file ~/.tmux/tmux-dark.conf
    #else
    #    tmux source-file ~/.tmux/tmux-light.conf
    #fi
    if [[ "$MODE" == "light" ]]; then
        `alacritty_theme gruvbox_light`
    else
        `alacritty_theme gruvbox_dark`
    fi
}
