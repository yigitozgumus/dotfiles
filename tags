!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
$NVIM_TUI_ENABLE_TRUE_COLOR	init.vim	/^  let $NVIM_TUI_ENABLE_TRUE_COLOR=1$/;"	v
<C-d>	init.vim	/^nmap <silent> <C-d> <Plug>(coc-range-select)$/;"	m
<S-TAB>	init.vim	/^inoremap <expr><S-TAB> pumvisible() ? "\\<C-p>" : "\\<C-h>"$/;"	m
<TAB>	init.vim	/^inoremap <silent><expr> <TAB>$/;"	m
<c-space>	init.vim	/^inoremap <silent><expr> <c-space> coc#refresh()$/;"	m
<cr>	init.vim	/^inoremap <expr> <cr> pumvisible() ? "\\<C-y>" : "\\<C-g>u\\<CR>"$/;"	m
<leader>a	init.vim	/^nmap <leader>a  <Plug>(coc-codeaction-selected)$/;"	m
<leader>ac	init.vim	/^nmap <leader>ac  <Plug>(coc-codeaction)$/;"	m
<leader>b	init.vim	/^nnoremap <silent>  <leader>b :ls<cr>:b<space>$/;"	m
<leader>f	init.vim	/^nmap <leader>f  <Plug>(coc-format-selected)$/;"	m
<leader>qf	init.vim	/^nmap <leader>qf  <Plug>(coc-fix-current)$/;"	m
<leader>rn	init.vim	/^nmap <leader>rn <Plug>(coc-rename)$/;"	m
<leader>rr	init.vim	/^map <leader>rr :source ~\/.config\/nvim\/init.vim<CR>"$/;"	m
<leader>t	init.vim	/^nnoremap <silent> <leader>t :TagbarToggle<CR>$/;"	m
<space>a	init.vim	/^nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>$/;"	m
<space>c	init.vim	/^nnoremap <silent> <space>c  :<C-u>CocList commands<cr>$/;"	m
<space>e	init.vim	/^nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>$/;"	m
<space>j	init.vim	/^nnoremap <silent> <space>j  :<C-u>CocNext<CR>$/;"	m
<space>k	init.vim	/^nnoremap <silent> <space>k  :<C-u>CocPrev<CR>$/;"	m
<space>o	init.vim	/^nnoremap <silent> <space>o  :<C-u>CocList outline<cr>$/;"	m
<space>p	init.vim	/^nnoremap <silent> <space>p  :<C-u>CocListResume<CR><Paste>$/;"	m
<space>s	init.vim	/^nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>$/;"	m
Fold	init.vim	/^command! -nargs=? Fold :call     CocAction('fold', <f-args>)$/;"	c
Format	init.vim	/^command! -nargs=0 Format :call CocAction('format')$/;"	c
K	init.vim	/^nnoremap <silent> K :call <SID>show_documentation()<CR>$/;"	m
OR	init.vim	/^command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')$/;"	c
[g	init.vim	/^nmap <silent> [g <Plug>(coc-diagnostic-prev)$/;"	m
]g	init.vim	/^nmap <silent> ]g <Plug>(coc-diagnostic-next)$/;"	m
af	init.vim	/^omap af <Plug>(coc-funcobj-a)$/;"	m
ayucolor	init.vim	/^let ayucolor="dark"$/;"	v
check_back_space	init.vim	/^function! s:check_back_space() abort$/;"	f
g:UltiSnipsExpandTrigger	init.vim	/^let g:UltiSnipsExpandTrigger="<tab>"$/;"	v
g:UltiSnipsJumpBackwardTrigger	init.vim	/^let g:UltiSnipsJumpBackwardTrigger="<s-tab>"$/;"	v
g:UltiSnipsJumpForwardTrigger	init.vim	/^let g:UltiSnipsJumpForwardTrigger="<tab>"$/;"	v
g:airline#extensions#tabline#enabled	init.vim	/^let g:airline#extensions#tabline#enabled = 1$/;"	v
g:airline_powerline_fonts	init.vim	/^let g:airline_powerline_fonts = 1$/;"	v
g:black_linelength	init.vim	/^let g:black_linelength = 100$/;"	v
g:deoplete#auto_complete_delay	init.vim	/^let g:deoplete#auto_complete_delay = 100$/;"	v
g:highlighter#syntax_python	init.vim	/^let g:highlighter#syntax_python = [$/;"	v
g:jsx_ext_required	init.vim	/^let g:jsx_ext_required = 1$/;"	v
g:python_highlight_all	init.vim	/^let g:python_highlight_all = 1$/;"	v
g:semshi#no_default_builtin_highlight	init.vim	/^let g:semshi#no_default_builtin_highlight = 0$/;"	v
g:vim_markdown_frontmatter	init.vim	/^let g:vim_markdown_frontmatter = 1$/;"	v
g:vim_markdown_json_frontmatter	init.vim	/^let g:vim_markdown_json_frontmatter = 1$/;"	v
g:vim_markdown_math	init.vim	/^let g:vim_markdown_math = 1$/;"	v
g:vim_markdown_new_list_item_indent	init.vim	/^let g:vim_markdown_new_list_item_indent = 2$/;"	v
gd	init.vim	/^nmap <silent> gd <Plug>(coc-definition)$/;"	m
gi	init.vim	/^nmap <silent> gi <Plug>(coc-implementation)$/;"	m
gr	init.vim	/^nmap <silent> gr <Plug>(coc-references)$/;"	m
gy	init.vim	/^nmap <silent> gy <Plug>(coc-type-definition)$/;"	m
if	init.vim	/^omap if <Plug>(coc-funcobj-i)$/;"	m
mygroup	init.vim	/^augroup mygroup$/;"	a
show_documentation	init.vim	/^function! s:show_documentation()$/;"	f
